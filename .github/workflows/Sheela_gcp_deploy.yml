name: Create VM Image

on:
  push:
    branches:
      - Sheela-deployment  # Trigger the workflow on push to the specified branch

env:
  PROJECT_ID: iconic-vine-438222-u6
  IMAGE_NAME: bank-marketing-mlops-image
  IMAGE_FAMILY: bank-marketing-mlops-family
  IMAGE_DESCRIPTION: "Image for Bank Marketing MLOps App"
  INSTANCE_TEMPLATE_NAME: bank-marketing-template
  ZONE: us-central1-a
  SOURCE_INSTANCE: bank-marketing-prediction-mlops-instance
  STARTUP_SCRIPT_PATH: gcpdeploy/startup-script.sh
  SETUP_SCRIPT_PATH: gcpdeploy/setup.sh

jobs:
  create-vm-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: gcloud

      - name: Generate SSH Key
        run: |
          echo "Generating SSH key if it doesn't exist..."
          mkdir -p ~/.ssh
          if [ ! -f ~/.ssh/google_compute_engine.pub ]; then
            ssh-keygen -t rsa -b 2048 -f ~/.ssh/google_compute_engine -N "" -q
            echo "SSH key generated successfully."
          else
            echo "SSH key already exists."
          fi
          # Set correct permissions
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
          ls -lh ~/.ssh

      - name: Add SSH Key to VM Metadata
        run: |
          echo "Adding SSH key to VM metadata..."
          if [ -f ~/.ssh/google_compute_engine.pub ]; then
            SSH_KEY=$(cat ~/.ssh/google_compute_engine.pub)
            gcloud compute instances add-metadata ${{ env.SOURCE_INSTANCE }} \
              --zone=${{ env.ZONE }} \
              --metadata ssh-keys="runner:${SSH_KEY}"
            echo "SSH key added to VM metadata."
          else
            echo "Error: SSH public key not found!" >&2
            exit 1
          fi

      - name: Wait for SSH Key to Propagate
        run: |
          echo "Waiting for SSH key to propagate..."
          for i in {1..10}; do
            gcloud compute ssh ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }} --command="echo SSH key propagation test" && break
            echo "Retrying in 10 seconds..."
            sleep 10
          done || { echo "Failed to connect after multiple attempts. Exiting."; exit 1; }

      - name: Copy Startup and Setup Scripts to Instance
        run: |
          echo "Preparing target directory and copying scripts..."
          gcloud compute ssh ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }} --command="sudo mkdir -p /home/$USER && sudo chmod -R 777 /home/$USER"
          gcloud compute scp ./${{ env.SETUP_SCRIPT_PATH }} ${{ env.SOURCE_INSTANCE }}:/home/ --zone=${{ env.ZONE }}
          gcloud compute scp ./${{ env.STARTUP_SCRIPT_PATH }} ${{ env.SOURCE_INSTANCE }}:/home/ --zone=${{ env.ZONE }}


      - name: Set Script Permissions on Instance
        run: |
          echo "Setting permissions for scripts on the VM..."
          gcloud compute ssh ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }} --command="chmod +x /home/$(basename ${{ env.SETUP_SCRIPT_PATH }}) && chmod +x /home/$(basename ${{ env.STARTUP_SCRIPT_PATH }})"

      - name: Run Setup Script on Instance
        run: |
          echo "Running setup script on the source instance..."
          gcloud compute ssh ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }} --command="bash /home/$(basename ${{ env.SETUP_SCRIPT_PATH }})"

      - name: Stop VM for Image Creation
        run: |
          echo "Stopping the source VM to create an image..."
          gcloud compute instances stop ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }}

      - name: Create VM Image
        run: |
          echo "Creating a new VM image..."
          gcloud compute images create ${{ env.IMAGE_NAME }} \
            --source-disk=${{ env.SOURCE_INSTANCE }} \
            --source-disk-zone=${{ env.ZONE }} \
            --family=${{ env.IMAGE_FAMILY }} \
            --description="${{ env.IMAGE_DESCRIPTION }}" \
            --force

      - name: Validate VM Image Creation
        run: |
          echo "Validating VM image creation..."
          gcloud compute images describe ${{ env.IMAGE_NAME }} || { echo "Image creation failed! Exiting..."; exit 1; }

      - name: Start VM after Image Creation
        run: |
          echo "Starting the source VM after image creation..."
          gcloud compute instances start ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }}
