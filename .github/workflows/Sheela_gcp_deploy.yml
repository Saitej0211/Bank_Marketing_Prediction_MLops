name: Attach load-balancer

on:
  push:
    branches:
      - Sheela-deployment  #change the branch here

env:
  PROJECT_ID: iconic-vine-438222-u6
  IMAGE_NAME: bank-marketing-mlops-image
  IMAGE_FAMILY: bank-marketing-mlops-family
  IMAGE_DESCRIPTION: "Image for Bank Marketing MLOps App"
  INSTANCE_TEMPLATE_NAME: bank-marketing-template
  ZONE: us-central1-a
  SOURCE_INSTANCE: bank-marketing-prediction-mlops-vm-instance
  STARTUP_SCRIPT_PATH: gcpdeploy/startup-script.sh
  SETUP_SCRIPT_PATH: gcpdeploy/setup.sh
  APP_FILE_PATH: gcpdeploy/app.py  
  GCS_MODEL_PATH: gs://mlopsprojectdatabucketgrp6/models/best_random_forest_model/model.pkl  
  MIG_NAME: new-bank-marketing-mig
  NEW_HEALTH_CHECK: my-new-health-check
  NEW_BACKEND_SERVICE: my-new-backend-service
  NEW_URL_MAP: my-new-url-map
  NEW_HTTP_PROXY: my-new-http-proxy
  NEW_FORWARDING_RULE: my-new-forwarding-rule
  VPC_NETWORK: bank-marketing-prediction-mlops-vpc
  SUBNET_NAME: bank-marketing-prediction-mlops-vpc-subnet

jobs:
  create-vm-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Validate File Paths
        run: |
          echo "Validating script paths..."
          ls -lh ./${{ env.STARTUP_SCRIPT_PATH }}
          ls -lh ./${{ env.SETUP_SCRIPT_PATH }}
          ls -lh ./${{ env.APP_FILE_PATH }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: gcloud

      - name: Prepare Target Directory on VM
        run: |
          echo "Preparing target directory on VM..."
          gcloud compute ssh ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }} --command="sudo mkdir -p /home/$USER && sudo chmod -R 755 /home/$USER"

      - name: Copy Scripts and App to Instance
        run: |
          echo "Extracting file names..."
          SETUP_SCRIPT_FILE=$(basename "${{ env.SETUP_SCRIPT_PATH }}")
          STARTUP_SCRIPT_FILE=$(basename "${{ env.STARTUP_SCRIPT_PATH }}")
          APP_FILE=$(basename "${{ env.APP_FILE_PATH }}")

          echo "Copying setup.sh..."
          gcloud compute scp ./${{ env.SETUP_SCRIPT_PATH }} ${{ env.SOURCE_INSTANCE }}:/home/$USER/$SETUP_SCRIPT_FILE --zone=${{ env.ZONE }} || { echo "Failed to copy setup.sh. Exiting."; exit 1; }

          echo "Copying startup-script.sh..."
          gcloud compute scp ./${{ env.STARTUP_SCRIPT_PATH }} ${{ env.SOURCE_INSTANCE }}:/home/$USER/$STARTUP_SCRIPT_FILE --zone=${{ env.ZONE }} || { echo "Failed to copy startup-script.sh. Exiting."; exit 1; }

          echo "Copying app.py..."
          gcloud compute scp ./${{ env.APP_FILE_PATH }} ${{ env.SOURCE_INSTANCE }}:/home/$USER/$APP_FILE --zone=${{ env.ZONE }} || { echo "Failed to copy app.py. Exiting."; exit 1; }

      - name: Download Model from GCS
        run: |
          echo "Downloading model file from GCS..."
          gcloud compute ssh ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }} --command="
            gsutil cp ${{ env.GCS_MODEL_PATH }} /home/$USER/$(basename ${{ env.GCS_MODEL_PATH }}) &&
            echo 'Model downloaded successfully!'
          "

      - name: Validate Files on VM
        run: |
          echo "Validating files on the VM..."
          gcloud compute ssh ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }} --command="
            ls -lh /home/$USER/$(basename ${{ env.SETUP_SCRIPT_PATH }}) &&
            ls -lh /home/$USER/$(basename ${{ env.STARTUP_SCRIPT_PATH }}) &&
            ls -lh /home/$USER/$(basename ${{ env.APP_FILE_PATH }}) &&
            ls -lh /home/$USER/$(basename ${{ env.GCS_MODEL_PATH }})
          "

      - name: Stop VM for Image Creation
        run: |
          echo "Stopping the source VM to prepare for image creation..."
          gcloud compute instances stop ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }}

      - name: Create VM Image
        run: |
          echo "Creating a new VM image..."
          gcloud compute images create ${{ env.IMAGE_NAME }} \
            --source-disk=${{ env.SOURCE_INSTANCE }} \
            --source-disk-zone=${{ env.ZONE }} \
            --family=${{ env.IMAGE_FAMILY }} \
            --description="${{ env.IMAGE_DESCRIPTION }}" \
            --force

      - name: Start VM after Image Creation
        run: |
          echo "Starting the source VM after image creation..."
          gcloud compute instances start ${{ env.SOURCE_INSTANCE }} --zone=${{ env.ZONE }}

      - name: Create Instance Template
        run: |
          echo "Creating instance template..."
          gcloud compute instance-templates create bank-marketing-template \
            --project=${{ env.PROJECT_ID }} \
            --machine-type=n1-standard-1 \
            --boot-disk-size=20GB \
            --boot-disk-type=pd-standard \
            --image-family=${{ env.IMAGE_FAMILY }} \
            --image-project=${{ env.PROJECT_ID }} \
            --network=${{ env.VPC_NETWORK }} \
            --subnet=${{ env.SUBNET_NAME }} \
            --region=us-central1
            --metadata=startup-script=/home/$USER/$(basename ${{ env.STARTUP_SCRIPT_PATH }}) \
            --tags=http-server,https-server \
            --description="Template for Bank Marketing MLOps"
      

      - name: Create Managed Instance Group
        run: |
          echo "Creating managed instance group..."
          gcloud compute instance-groups managed create ${{ env.MIG_NAME }} \
            --project=${{ env.PROJECT_ID }} \
            --base-instance-name=bank-marketing-instance \
            --size=1 \
            --template=${{ env.INSTANCE_TEMPLATE_NAME }} \
            --zone=${{ env.ZONE }} \
            --description="Managed Instance Group for Bank Marketing MLOps"

      - name: Set Named Ports for MIG
        run: |
          echo "Setting named ports for the Managed Instance Group..."
          gcloud compute instance-groups managed set-named-ports ${{ env.MIG_NAME }} \
            --named-ports=http:80 \
            --zone=${{ env.ZONE }} \
            --project=${{ env.PROJECT_ID }} || { echo "Failed to set named ports"; exit 1; }


      - name: Enable Auto-Scaling for MIG
        run: |
          echo "Configuring auto-scaling for the Managed Instance Group..."
          gcloud compute instance-groups managed set-autoscaling ${{ env.MIG_NAME }} \
            --project=${{ env.PROJECT_ID }} \
            --zone=${{ env.ZONE }} \
            --max-num-replicas=5 \
            --min-num-replicas=1 \
            --target-cpu-utilization=0.60 \
            --cool-down-period=90

      - name: Create New Load Balancer
        run: |
          echo "Creating a new load balancer and attaching the new MIG..."
          gcloud compute health-checks create http ${{ env.NEW_HEALTH_CHECK }} \
            --project=${{ env.PROJECT_ID }} \
            --port=80 \
            --request-path=/ \
            --check-interval=10s \
            --timeout=5s \
            --unhealthy-threshold=2 \
            --healthy-threshold=2

          gcloud compute backend-services create ${{ env.NEW_BACKEND_SERVICE }} \
            --project=${{ env.PROJECT_ID }} \
            --protocol=HTTP \
            --port-name=http \
            --health-checks=${{ env.NEW_HEALTH_CHECK }} \
            --global

          gcloud compute backend-services add-backend ${{ env.NEW_BACKEND_SERVICE }} \
            --project=${{ env.PROJECT_ID }} \
            --instance-group=${{ env.MIG_NAME }} \
            --instance-group-zone=${{ env.ZONE }} \
            --global

          gcloud compute url-maps create ${{ env.NEW_URL_MAP }} \
            --project=${{ env.PROJECT_ID }} \
            --default-service=${{ env.NEW_BACKEND_SERVICE }}

          gcloud compute target-http-proxies create ${{ env.NEW_HTTP_PROXY }} \
            --project=${{ env.PROJECT_ID }} \
            --url-map=${{ env.NEW_URL_MAP }}

          gcloud compute forwarding-rules create ${{ env.NEW_FORWARDING_RULE }} \
            --project=${{ env.PROJECT_ID }} \
            --global \
            --target-http-proxy=${{ env.NEW_HTTP_PROXY }} \
            --ports=80