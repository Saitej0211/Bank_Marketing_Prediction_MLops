name: Bank Marketing MLOps CI/CD

on:
  push:
    branches: hashwanth_model_changes
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  REGION: us-east4
  REPOSITORY_NAME: Bank_Marketing_Prediction_MLops
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
  PYTHON_VERSION: '3.10'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v4
        id: cache-deps
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      - run: pip install pytest
      - run: pytest tests/

  build_and_deploy:
    needs: [setup, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Set GCP project ID
        run: gcloud config set project "${{ secrets.GCP_PROJECT_ID }}"
      
      - name: Setup Airflow
        run: |
          mkdir -p ./dags ./logs ./plugins
          docker-compose up airflow-init
          docker-compose up -d
          sleep 60  # Reduced wait time
      
      - name: Run Airflow DAG
        run: |
          docker-compose exec -T airflow-webserver airflow dags trigger ModelDevelopmentPipeline
          for i in {1..10}; do
            STATUS=$(docker-compose exec -T airflow-webserver airflow dags state ModelDevelopmentPipeline $(date +%Y-%m-%d))
            if [ "$STATUS" = "success" ]; then
              echo "DAG completed successfully"
              break
            elif [ "$STATUS" = "failed" ]; then
              echo "DAG failed"
              exit 1
            fi
            echo "DAG still running, waiting..."
            sleep 30
          done
      
      - name: Upload Model to GCS
        run: |
          MODEL_FILE=$(find . -name best_model.pkl)
          if [ -z "$MODEL_FILE" ]; then
            echo "Error: best_model.pkl not found"
            exit 1
          fi
          gsutil cp $MODEL_FILE gs://${{ env.GCS_BUCKET_NAME }}/models/best_model_${{ github.sha }}.pkl
      
      - name: Deploy Model to AI Platform
        run: |
          gcloud ai models upload \
            --region=${{ env.REGION }} \
            --display-name=bank-marketing-model-${{ github.sha }} \
            --artifact-uri=gs://${{ env.GCS_BUCKET_NAME }}/models/best_model_${{ github.sha }}.pkl
      
      - name: Build and Push Docker Image
        env:
          IMAGE_NAME: ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/model-image
        run: |
          docker build -t ${IMAGE_NAME}:${{ github.sha }} .
          docker push ${IMAGE_NAME}:${{ github.sha }}
          docker tag ${IMAGE_NAME}:${{ github.sha }} ${IMAGE_NAME}:latest
          docker push ${IMAGE_NAME}:latest
      
      - name: Clean up
        if: always()
        run: docker-compose down --volumes --rmi all

  notify:
    needs: build_and_deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify success
        if: success()
        run: echo "CI/CD pipeline completed successfully. Model uploaded and services started."
      - name: Notify failure
        if: failure()
        run: echo "CI/CD pipeline failed. Check the logs for details."